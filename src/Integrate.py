#!/usr/bin/env python

# Preprocess.py
# Part of anndata_manualAnnotate for processing spatial omics data
# Marcello DiStasio
# Oct 2023


import anndata as ad
import squidpy as sq
import scanpy as sc


import numpy as np
from matplotlib import pyplot as plt
import os, sys

# --------------------------------------------------------------------------------
# Edit this path
# --------------------------------------------------------------------------------
#FILEPATHBASE = '/Users/mmd47/Library/CloudStorage/GoogleDrive-mmd47@yale.edu/My Drive/DiStasio Lab/DiStasio Lab Share/'
FILEPATHBASE = '/home/mdistasio/YaleGoogleDrive/DiStasio Lab/DiStasio Lab Share/'


# --------------------------------------------------------------------------------
SAVEFIGS = True
if SAVEFIGS:
    IMGDIR = os.path.join(FILEPATHBASE,'02 Analysis', 'annData_ManualAnnotate', 'img')



# --------------------------------------------------------------------------------
# Load concatenated datasets (generated by Preprocess.py
# --------------------------------------------------------------------------------
filename = os.path.join(FILEPATHBASE,'02 Analysis', 'annData_ManualAnnotate', 'calc', 'retinas_all.h5ad')
retinas_all = ad.read_h5ad(filename)


# --------------------------------------------------------------------------------
# Batch correction with scvi
# --------------------------------------------------------------------------------
# print('Batch Correction with scvi-tools...')

# scvi.settings.seed = 0
# print("Last run with scvi-tools version:", scvi.__version__)


# scvi.model.SCVI.setup_anndata(
#     retinas_all,
#     layer="counts",
#     categorical_covariate_keys=["dataset"],
# )



# print('Done! Exiting.')
# sys.exit(0)





# --------------------------------------------------------------------------------
# Batch correction with Harmony
# --------------------------------------------------------------------------------
print('Batch Correction with Harmony...')


for ncomponents in np.arange(8,31):
    sc.tl.pca(retinas_all, svd_solver='arpack', n_comps=ncomponents)
    sc.external.pp.harmony_integrate(retinas_all, key='dataset')




    # --------------------------------------------------------------------------------
    # Clustering
    # --------------------------------------------------------------------------------
    print('Clustering...')

    sc.pp.neighbors(retinas_all, n_neighbors=20, n_pcs=ncomponents, use_rep='X_pca_harmony')
    sc.tl.leiden(retinas_all)
    sc.tl.paga(retinas_all)
    sc.pl.paga(retinas_all, plot=False)
    sc.tl.umap(retinas_all, init_pos='paga')

    print('Done!')


    # --------------------------------------------------------------------------------
    # Save output
    # --------------------------------------------------------------------------------
    print('Saving...')
    retinas_all.write(filename)



    # --------------------------------------------------------------------------------
    # Figure output
    # --------------------------------------------------------------------------------
    if SAVEFIGS:

        # UMAP embedding
        fig, axx = plt.subplots(1, 2, figsize=(15,5),  gridspec_kw={'wspace': 1})
        sc.pl.umap(retinas_all, color="leiden", size=3, ax=axx[0], show=False)
        sc.pl.umap(retinas_all, color="dataset", size=3, ax=axx[1], show=False)
        for ax in axx:
            ax.set_title('Combined Retinas')
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)

        fig.savefig(os.path.join(IMGDIR, 'UMAP_Leiden_and_dataset_-_AllRetinas_nPCS_{}.png'.format(ncomponents)), dpi=300)




        # Spatial mapped plots, colored by cluster ID
        for DATASET in ['R1','R2','R3','R4','R5']:
            fig, ax = plt.subplots(figsize=(10,5))
            sq.pl.spatial_scatter(retinas_all[retinas_all.obs['dataset']==DATASET], color="leiden", size=0.5, shape=None, ax=ax)
            ax.set_xlabel('')
            ax.set_ylabel('')
            ax.spines['top'].set_visible(False)
            ax.spines['right'].set_visible(False)
            ax.spines['bottom'].set_visible(False)
            ax.spines['left'].set_visible(False)
            fig.savefig(os.path.join(IMGDIR, 'Spatial_Leiden_-_Retina_' + DATASET + '_nPCS_{}.png'.format(ncomponents)), dpi=300)


        
