#!/usr/bin/env python

# IntegrateHarmony.py
# Part of anndata_manualAnnotate for processing spatial omics data
# Marcello DiStasio
# Oct 2023

import warnings
warnings.filterwarnings('ignore')


import anndata as ad
import squidpy as sq
import scanpy as sc
import scvi
from scvi.model import CondSCVI, DestVI

import numpy as np
import os
from pathlib import Path
import argparse

from matplotlib import pyplot as plt
from matplotlib.colors import ListedColormap
from cycler import cycler

parser = argparse.ArgumentParser()
parser.add_argument('-b', '--basepath', type=str, help='Path to base directory for the project; should contain directories \'data\' and \'calc\'')
args = parser.parse_args()

FILEPATHBASE = args.basepath

SAVEDATA = True
SAVEFIGS = True
if SAVEFIGS:
    IMGDIR = os.path.join(FILEPATHBASE,'img', 'out')
    Path(IMGDIR).mkdir(parents=True, exist_ok=True)

# --------------------------------------------------------------------------------
# Load concatenated datasets (generated by Preprocess.py
# --------------------------------------------------------------------------------
filename = os.path.join(FILEPATHBASE, 'calc', 'samples_all.h5ad')
print("Loading Data from: " + filename)
samples_all = ad.read_h5ad(filename)

samples_all.obs['batch'] = samples_all.obs['dataset']
samples_all.raw = samples_all  # keep full dimension safe 



# --------------------------------------------------------------------------------
# Batch correction with Harmony
# (must run
# pip install harmonypy
# first)
# --------------------------------------------------------------------------------
print('Batch Correction with Harmony...')

sc.tl.pca(samples_all)
sc.external.pp.harmony_integrate(samples_all, key='dataset')



# --------------------------------------------------------------------------------
# Clustering
# --------------------------------------------------------------------------------

sc.pp.neighbors(samples_all, n_neighbors=20, n_pcs=30, use_rep='X_pca_harmony')
sc.tl.leiden(samples_all)
sc.tl.paga(samples_all)
sc.pl.paga(samples_all, plot=False)
sc.tl.umap(samples_all, init_pos='paga')

# --------------------------------------------------------------------------------
# Save concatenated data
# --------------------------------------------------------------------------------
if SAVEDATA:
    out_filename = os.path.join(FILEPATHBASE, 'calc', 'samples_all_integrated_harmony_unfiltered.h5ad')
    samples_all.write(out_filename)
    print('Saved integrated data to: ' + out_filename)


# --------------------------------------------------------------------------------
# Figure output
# --------------------------------------------------------------------------------

if SAVEFIGS:

    SampleKey = samples_all.uns["SampleKey"]

    nGroupsToPlot = 10
    groups = sorted(np.unique(samples_all.obs['leiden']), key=lambda x: int(x))[0:nGroupsToPlot]

    spect = plt.cm.tab10.resampled(nGroupsToPlot)
    newcolors = np.flip(spect(np.linspace(0,1,nGroupsToPlot)), axis=0)
    newpalette = ListedColormap(newcolors)
    color_cycler = cycler(color=newpalette.colors)
    
    # Fig for UMAP embedding
    fig, axx = plt.subplots(1, 2, figsize=(15,8),  gridspec_kw={'wspace': 1})
    sc.pl.umap(samples_all, color="leiden", size=3, ax=axx[0], palette=color_cycler, groups=groups, show=False)
    sc.pl.umap(samples_all, color="dataset", size=3, ax=axx[1], show=False)
    for ax in axx:
        ax.set_title('Harmony Combined Retinas')
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['bottom'].set_visible(False)
        ax.spines['left'].set_visible(False)


    for img_ext in ['png','svg']:
        fig_filename = os.path.join(IMGDIR, 'UMAP_Harmony_-_.' + img_ext)
        fig.savefig(fig_filename, dpi=300)    
        print('Saved figure: ' + fig_filename)

    # Spatial Scatter Montage
    Samples = list(samples_all.obs['dataset'].cat.categories)

    nRow = 2
    nCol = int(np.ceil(len(Samples)/2))
    fig, axs = plt.subplots(nRow, nCol, figsize=(35,20))
    for r in np.arange(len(Samples)):
        ax = axs.reshape(-1)[r]
        ss = 10
        sq.pl.spatial_scatter(samples_all[samples_all.obs['dataset']==Samples[r]], 
                              color='leiden', 
                              groups=groups,
                              size=ss, 
                              shape=None, 
                              ax=ax, 
                              palette=newpalette)
        ax.set_title(SampleKey[Samples[r]])
        ax.set_xlabel('')
        ax.set_ylabel('')
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['bottom'].set_visible(False)
        ax.spines['left'].set_visible(False)
        ax.get_legend().remove()
    fig.tight_layout()

    labels_handles = {  label: handle for ax in fig.axes for handle, label in zip(*ax.get_legend_handles_labels())    }
    fig.legend( labels_handles.values(), labels_handles.keys(), loc = "upper right", ncol=3)

    
    for img_ext in ['png','svg']:
        fig_filename = os.path.join(IMGDIR, 'Spatial_Harmony_-_.' + img_ext)
        fig.savefig(fig_filename, dpi=300)    
        print('Saved figure: ' + fig_filename)

        
print("Complete! Exiting.")


