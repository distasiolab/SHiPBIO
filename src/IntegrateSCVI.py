#!/usr/bin/env python

# Preprocess.py
# Part of anndata_manualAnnotate for processing spatial omics data
# Marcello DiStasio
# Oct 2023

import warnings
warnings.filterwarnings('ignore')


import anndata as ad
import squidpy as sq
import scanpy as sc
import scvi
from scvi.model import CondSCVI, DestVI

import numpy as np
import os

from matplotlib import pyplot as plt

# --------------------------------------------------------------------------------
# Edit this path
# --------------------------------------------------------------------------------
#FILEPATHBASE = '/Users/mmd47/Library/CloudStorage/GoogleDrive-mmd47@yale.edu/My Drive/DiStasio Lab/DiStasio Lab Share/'
FILEPATHBASE = '/home/mdistasio/YaleGoogleDrive/DiStasio Lab/DiStasio Lab Share/'


# --------------------------------------------------------------------------------
SAVEFIGS = True
if SAVEFIGS:
    IMGDIR = os.path.join(FILEPATHBASE,'02 Analysis', 'annData_ManualAnnotate', 'img')



# --------------------------------------------------------------------------------
# Load concatenated datasets (generated by Preprocess.py
# --------------------------------------------------------------------------------
filename = os.path.join(FILEPATHBASE,'02 Analysis', 'annData_ManualAnnotate', 'calc', 'retinas_all.h5ad')
print("Loading Data from: " + filename)
retinas_all = ad.read_h5ad(filename)

retinas_all.obs['batch'] = retinas_all.obs['dataset']
retinas_all.obs['batch'][retinas_all.obs['batch'] == 'R2'] = 'R1'

retinas_all.raw = retinas_all  # keep full dimension safe 

print('Filtering for highly variable genes')
sc.pp.filter_genes(
    retinas_all,
    min_cells=3)
    
sc.pp.highly_variable_genes(
    retinas_all,
    n_top_genes=1200,
    subset=True,
    layer="counts",
    flavor="seurat_v3")

print("Done")

# --------------------------------------------------------------------------------
# Batch correction with scvi
# --------------------------------------------------------------------------------
print('Batch Correction with scvi-tools...')

scvi.settings.seed = 0
print("Last run with scvi-tools version:", scvi.__version__)

scvi.model.SCVI.setup_anndata(retinas_all, layer="counts", batch_key="batch")
model = scvi.model.SCVI(retinas_all, n_layers=2, n_latent=30, gene_likelihood="nb")
model.train()

SCVI_LATENT_KEY = "X_scVI"
retinas_all.obsm[SCVI_LATENT_KEY] = model.get_latent_representation()

retinas_all.layers['counts_scvi'] = model.posterior_predictive_sample().to_scipy_sparse()

# --------------------------------------------------------------------------------
# Clustering
# --------------------------------------------------------------------------------
sc.pp.neighbors(retinas_all, use_rep=SCVI_LATENT_KEY)
sc.tl.leiden(retinas_all)
SCVI_MDE_KEY = "X_scVI_MDE"
retinas_all.obsm[SCVI_MDE_KEY] = scvi.model.utils.mde(retinas_all.obsm[SCVI_LATENT_KEY])


# --------------------------------------------------------------------------------
# Save concatenated data
# --------------------------------------------------------------------------------
out_filename = os.path.join(FILEPATHBASE,'02 Analysis', 'annData_ManualAnnotate', 'calc', 'retinas_all_integrated.h5ad')
retinas_all.write(out_filename)

print('Saved integrated data to: ' + out_filename)


# --------------------------------------------------------------------------------
# Figure output
# --------------------------------------------------------------------------------

if SAVEFIGS:

    # MDE embedding of clusters
    fig, axx = plt.subplots(1, 2, figsize=(15,5),  gridspec_kw={'wspace': 1})
    sc.pl.embedding(retinas_all, basis=SCVI_MDE_KEY, color=["batch"], frameon=False, ncols=1, ax = axx[0], show=False)
    sc.pl.embedding(retinas_all, basis=SCVI_MDE_KEY, color=["leiden"], frameon=False, ncols=1, ax = axx[1], show=False)    
    for ax in axx:
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['bottom'].set_visible(False)
        ax.spines['left'].set_visible(False)
    figoutfname = os.path.join(IMGDIR, 'MDE_Leiden_and_dataset_-_AllRetinasIntegrated.png')
    fig.savefig(figoutfname, dpi=300)
    print("Saved figure: " + figoutfname)

    # Cluster maps in spatial coordinates
    Samples = list(retinas_all.obs['dataset'].cat.categories)
    fig, ax = plt.subplots(1, len(Samples), figsize=(50,10))
    for r in np.arange(len(Samples)):
        sq.pl.spatial_scatter(retinas_all[retinas_all.obs['dataset']==Samples[r]], color='leiden', size=1, shape=None, ax=ax[r])
        ax[r].set_xlabel('')
        ax[r].set_ylabel('')
        ax[r].spines['top'].set_visible(False)
        ax[r].spines['right'].set_visible(False)
        ax[r].spines['bottom'].set_visible(False)
        ax[r].spines['left'].set_visible(False)

    figoutfname = os.path.join(IMGDIR, 'Spatial_scVI_-_AllRetinasIntegrated.png')
    fig.savefig(figoutfname, dpi=300)    
    print("Saved figure: " + figoutfname)


print("Complete! Exiting.")


