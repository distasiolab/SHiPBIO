import warnings
warnings.filterwarnings('ignore')

import anndata as ad
import squidpy as sq
import scanpy as sc

import numpy as np
import pandas as pd
import os
from pathlib import Path

import re
import json

import seaborn as sns
from matplotlib import pyplot as plt
from matplotlib.colors import ListedColormap
from cycler import cycler


parser = argparse.ArgumentParser()
parser.add_argument('-b', '--basepath', type=str, help='Path to base directory for the project; should contain directories \'data\' and \'calc\'')
args = parser.parse_args()


# --------------------------------------------------------------------------------
# File I/O Setup
# --------------------------------------------------------------------------------
FILEPATHBASE = args.basepath

SAVEDATA = True
SAVEFIGS = True
if SAVEFIGS:
    IMGDIR = os.path.join(FILEPATHBASE, 'img', 'out')
    Path(IMGDIR).mkdir(parents=True, exist_ok=True)
    
# --------------------------------------------------------------------------------
# Load datasets (generated by IntegrateHarmony.py)
# --------------------------------------------------------------------------------
filename = os.path.join(FILEPATHBASE, 'calc', 'samples_all_integrated_imputed_cellcharter_clustered.h5ad')
print("Loading Data from: " + filename + ' ...')
samples_all = ad.read_h5ad(filename)

SampleKey = samples_all.uns["SampleKey"]
Samples = list(samples_all.obs['dataset'].cat.categories)

# Plotting
n_clusters = 21

GroupsToAnalyze = list(np.arange(0,n_clusters))
groups = [sorted(np.unique(samples_all.obs['spatial_cluster']), key=lambda x: int(x))[i] for i in GroupsToAnalyze]
nGroupsToPlot = len(GroupsToAnalyze)
spect = plt.cm.tab20.resampled(nGroupsToPlot)
newcolors = np.flip(spect(np.linspace(0,1,nGroupsToPlot)), axis=0)
newpalette = ListedColormap(newcolors)
color_cycler = cycler(color=newpalette.colors)



nRow = 3
nCol = int(np.ceil(len(Samples)/3))
fig, axs = plt.subplots(nRow, nCol, figsize=(40,30))
for r in np.arange(len(Samples)):
    ax = axs.reshape(-1)[r]
    ss = 1
    sq.pl.spatial_scatter(samples_all[samples_all.obs['dataset']==Samples[r]],
                          color='spatial_cluster',
                          size=ss,
                          shape=None,
                          groups=groups,
                          ax=ax,
                          palette=newpalette)
    ax.set_title(SampleKey[Samples[r]])

for ax in axs.reshape(-1):
    ax.set_xlabel('')
    ax.set_ylabel('')
    ax.axis('off')
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.spines['bottom'].set_visible(False)
    ax.spines['left'].set_visible(False)
    try:
        ax.get_legend().remove()
    except:
        pass

fig.tight_layout()

fig.set_facecolor('k')
for text in fig.findobj(match=lambda x: isinstance(x, plt.Text)):
    if hasattr(text, 'set_color'):
        text.set_color('white')

labels_handles = {  label: handle for ax in fig.axes for handle, label in zip(*ax.get_legend_handles_labels())    }
fig.legend( labels_handles.values(), labels_handles.keys(), loc = "lower right", ncol=3)

if SAVEFIGS:
    filename_out = os.path.join(IMGDIR, 'AllSamples_GIMVI_CellCharter_' + str(n_clusters) + '_Clusters.png')
    fig.savefig(filename_out, dpi=300)
    print('Saved: ' + filename_out)
    filename_out = os.path.join(IMGDIR, 'AllSamples_GIMVI_CellCharter_' + str(n_clusters) + '_Clusters.svg')
    fig.savefig(filename_out, dpi=300)
    print('Saved: ' + filename_out)
