#!/usr/bin/env python

# Preprocess.py
# Part of anndata_manualAnnotate for processing spatial omics data
# Marcello DiStasio
# Oct 2023

import warnings
warnings.filterwarnings('ignore')


import anndata as ad
import squidpy as sq
import scanpy as sc
import scvi
from scvi.model import CondSCVI, DestVI

import numpy as np
import os

from matplotlib import pyplot as plt

# --------------------------------------------------------------------------------
# Edit this path
# --------------------------------------------------------------------------------
#FILEPATHBASE = '/Users/mmd47/Library/CloudStorage/GoogleDrive-mmd47@yale.edu/My Drive/DiStasio Lab/DiStasio Lab Share/'
FILEPATHBASE = '/home/mdistasio/YaleGoogleDrive/DiStasio Lab/DiStasio Lab Share/'


# --------------------------------------------------------------------------------
SAVEFIGS = True
if SAVEFIGS:
    IMGDIR = os.path.join(FILEPATHBASE,'02 Analysis', 'annData_ManualAnnotate', 'img')



# --------------------------------------------------------------------------------
# Load concatenated datasets (generated by Preprocess.py
# --------------------------------------------------------------------------------
filename = os.path.join(FILEPATHBASE,'02 Analysis', 'annData_ManualAnnotate', 'calc', 'retinas_all.h5ad')
print("Loading Data from: " + filename)
retinas_all = ad.read_h5ad(filename)

retinas_all.obs['batch'] = retinas_all.obs['dataset']
retinas_all.obs['batch'][retinas_all.obs['batch'] == 'R2'] = 'R1'

retinas_all.raw = retinas_all  # keep full dimension safe 

print('Filtering for highly variable genes')
sc.pp.filter_genes(
    retinas_all,
    min_cells=20)
    
sc.pp.highly_variable_genes(
    retinas_all,
    n_top_genes=3000,
    subset=True,
    layer="counts",
    flavor="seurat_v3")

print("Done")

# --------------------------------------------------------------------------------
# Batch correction with Harmony
# (must run
# pip install harmonypy
# first)
# --------------------------------------------------------------------------------
print('Batch Correction with Harmony...')

sc.tl.pca(retinas_all)
sc.external.pp.harmony_integrate(retinas_all, key='dataset')



# --------------------------------------------------------------------------------
# Clustering
# --------------------------------------------------------------------------------

sc.pp.neighbors(retinas_all, n_neighbors=20, n_pcs=30, use_rep='X_pca_harmony')
sc.tl.leiden(retinas_all)
sc.tl.paga(retinas_all)
sc.pl.paga(retinas_all, plot=False)
sc.tl.umap(retinas_all, init_pos='paga')

# --------------------------------------------------------------------------------
# Save concatenated data
# --------------------------------------------------------------------------------
out_filename = os.path.join(FILEPATHBASE,'02 Analysis', 'annData_ManualAnnotate', 'calc', 'retinas_all_integrated_harmony.h5ad')
retinas_all.write(out_filename)

print('Saved integrated data to: ' + out_filename)


# --------------------------------------------------------------------------------
# Figure output
# --------------------------------------------------------------------------------

if SAVEFIGS:
    
    fig, axx = plt.subplots(1, 2, figsize=(15,5),  gridspec_kw={'wspace': 1})
    sc.pl.umap(retinas_all, color="leiden", size=3, ax=axx[0], show=False)
    sc.pl.umap(retinas_all, color="dataset", size=3, ax=axx[1], show=False)
    for ax in axx:
        ax.set_title('Harmony Combined Retinas')
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['bottom'].set_visible(False)
        ax.spines['left'].set_visible(False)
        
        
    Samples = list(retinas_all.obs['dataset'].cat.categories)

    fig, ax = plt.subplots(1, len(Samples), figsize=(50,10))
    
    for r in np.arange(len(Samples)):

        if r < 2:
            ss = 3
        else:
            ss = 1
            
        sq.pl.spatial_scatter(retinas_all[retinas_all.obs['dataset']==Samples[r]], color='leiden', size=ss, shape=None, ax=ax[r], palette=None)
        ax[r].set_xlabel('')
        ax[r].set_ylabel('')
        ax[r].spines['top'].set_visible(False)
        ax[r].spines['right'].set_visible(False)
        ax[r].spines['bottom'].set_visible(False)
        ax[r].spines['left'].set_visible(False)
        
    fig.savefig(os.path.join(IMGDIR, 'Spatial_Harmony_-_.png'), dpi=300)    

    print('Saved figure: ' + os.path.join(IMGDIR, 'Spatial_Harmony_-_.png'))
        
print("Complete! Exiting.")


