#!/usr/bin/env python

# GeneratePlots.py
# Part of anndata_manualAnnotate for processing spatial omics data
# Marcello DiStasio
# Oct 2023

import warnings
warnings.filterwarnings('ignore')


import anndata as ad
import squidpy as sq
import scanpy as sc

import numpy as np
import os

from matplotlib import pyplot as plt
from matplotlib.colors import ListedColormap
from matplotlib import gridspec
from cycler import cycler

# --------------------------------------------------------------------------------
# Edit this path
# --------------------------------------------------------------------------------
#FILEPATHBASE = '/Users/mmd47/Library/CloudStorage/GoogleDrive-mmd47@yale.edu/My Drive/DiStasio Lab/DiStasio Lab Share/'
FILEPATHBASE = '/home/mdistasio/YaleGoogleDrive/DiStasio Lab/DiStasio Lab Share/'


# --------------------------------------------------------------------------------
SAVEFIGS = True
if SAVEFIGS:
    IMGDIR = os.path.join(FILEPATHBASE,'02 Analysis', 'annData_ManualAnnotate', 'img', 'tmp')



# --------------------------------------------------------------------------------
# Load integrated datasets (generated by IntegrateHarmony.py)
# --------------------------------------------------------------------------------
filename = os.path.join(FILEPATHBASE,'02 Analysis', 'annData_ManualAnnotate', 'calc', 'retinas_all_integrated_harmony.h5ad')
print("Loading Data from: " + filename)
retinas_all = ad.read_h5ad(filename)


# --------------------------------------------------------------------------------
# Figure output
# --------------------------------------------------------------------------------

if SAVEFIGS:

    SampleKey = retinas_all.uns["SampleKey"]
    Samples = list(retinas_all.obs['dataset'].cat.categories)

    nGroupsToPlot = 10
    groups = sorted(np.unique(retinas_all.obs['leiden']), key=lambda x: int(x))[0:nGroupsToPlot]
    
    spect = plt.cm.tab10.resampled(nGroupsToPlot)
    newcolors = np.flip(spect(np.linspace(0,1,nGroupsToPlot)), axis=0)
    newpalette = ListedColormap(newcolors)
    color_cycler = cycler(color=newpalette.colors)


    
    # # Fig for UMAP embedding
    fig, axx = plt.subplots(1, 2, figsize=(15,8),  gridspec_kw={'wspace': 1})
    sc.pl.umap(retinas_all, color="leiden", size=3, ax=axx[0], palette=color_cycler, groups=groups, show=False)
    sc.pl.umap(retinas_all, color="dataset", size=3, ax=axx[1], show=False)
    for ax in axx:
        ax.set_title('Harmony Combined Retinas')
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['bottom'].set_visible(False)
        ax.spines['left'].set_visible(False)
        ax.set_facecolor('k')

    fig.set_facecolor('k')
    for text in fig.findobj(match=lambda x: isinstance(x, plt.Text)):
        if hasattr(text, 'set_color'):
            text.set_color('white')

        
    for img_ext in ['png','svg']:
        fig_filename = os.path.join(IMGDIR, 'UMAP_Harmony_-_.' + img_ext)
        fig.savefig(fig_filename, dpi=300)    
        print('Saved figure: ' + fig_filename)



    

    # Spatial Scatter Montage

    plotsizes = []
    for r in np.arange(len(Samples)):
        a = retinas_all[retinas_all.obs['dataset']==Samples[r]]
        plotsize = a.obsm['X_spatial'].max(axis=0) - a.obsm['X_spatial'].min(axis=0)
        plotsizes.append(plotsize)

    sizes = [(ss[0], ss[1]) for ss in plotsizes]

    total_subplots = len(sizes)
    total_cols = 6
    total_rows = int(np.ceil(total_subplots / total_cols))

    width_ratios_per_row =  np.pad(np.array(sizes)[:,0],(0,(total_rows*total_cols - len(sizes)))).reshape(-1, total_cols).tolist()
    
    fig = plt.figure(figsize=(18,6))
    outer_grid = fig.add_gridspec(total_rows, 1, wspace=0, hspace=0)
    axs = []
    for row in range(total_rows):
        inner_grid = outer_grid[row,0].subgridspec(1, total_cols, width_ratios=width_ratios_per_row[row])
        axs.extend(inner_grid.subplots())

    for i in np.arange(len(Samples)):
        ax = axs[i]
        sq.pl.spatial_scatter(retinas_all[retinas_all.obs['dataset']==Samples[i]],
                              color='leiden',
                              groups=groups,
                              size=3,
                              linewidth=0,
                              shape=None,
                              ax=ax,
                              palette=newpalette)
        ax.set_title(SampleKey[Samples[i]])
    
    for ax in axs:
        ax.set_aspect('equal')
        ax.set_xlabel('')
        ax.set_ylabel('')
        ax.axis('off')
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        ax.spines['bottom'].set_visible(False)
        ax.spines['left'].set_visible(False)
        try:
            ax.get_legend().remove()
        except:
            pass

    fig.set_facecolor('k')
    for text in fig.findobj(match=lambda x: isinstance(x, plt.Text)):
        if hasattr(text, 'set_color'):
            text.set_color('white')

    labels_handles = {  label: handle for ax in fig.axes for handle, label in zip(*ax.get_legend_handles_labels())    }
    fig.legend( labels_handles.values(), labels_handles.keys(), loc = "lower right", ncol=3)

    #plt.show()
    for img_ext in ['png','svg']:
        fig_filename = os.path.join(IMGDIR, 'Spatial_Harmony_-_{}'.format('Montage') + '.' + img_ext)
        fig.savefig(fig_filename, facecolor=fig.get_facecolor(), edgecolor='none', dpi=400)    
        print('Saved figure: ' + fig_filename)



        
    # # Individual Case Plots
    # GenesToShow = ['NEFL', 'RHO']

    # ss = 5
    # for r in np.arange(len(Samples)):
    #     fig, axs = plt.subplots(1, 3, figsize=(35,10))
    #     sq.pl.spatial_scatter(retinas_all[retinas_all.obs['dataset']==Samples[r]],
    #                                   color=['leiden'] + GenesToShow,
    #                                   groups=groups,
    #                                   na_color=(0,0,0,0),
    #                                   size=ss,
    #                                   shape=None,
    #                                   fig = fig,
    #                                   ax = axs,
    #                                   alpha=0.9,
    #                                   cmap='autumn_r',
    #                                   legend_na=True,
    #                                   palette=newpalette)
    #     axs[0].set_title(SampleKey[Samples[r]])
    #     for ax in axs:
    #         ax.set_facecolor('k')
    #         ax.set_xlabel('')
    #         ax.set_ylabel('')
    #         ax.spines['top'].set_visible(False)
    #         ax.spines['right'].set_visible(False)
    #         ax.spines['bottom'].set_visible(False)
    #         ax.spines['left'].set_visible(False)

    #     fig.tight_layout()
    #     fig.set_facecolor('k')
    #     for text in fig.findobj(match=lambda x: isinstance(x, plt.Text)):
    #         if hasattr(text, 'set_color'):
    #             text.set_color('white')

        
    #     axs[0].legend( labels_handles.values(), labels_handles.keys(), loc = "upper right", ncol=1)

    #     ax_position = ax.get_position()
    #     for c in fig.get_children()[-len(GenesToShow):]:
    #         c_position = c.get_position()
    #         c.set_position([c_position.x1 -0.02, ax_position.y0, 0.01, ax_position.height])

        
    #     for img_ext in ['png','svg']:
    #         fig_filename = os.path.join(IMGDIR, 'Spatial_Harmony_-_{}'.format(Samples[r]) + '.' + img_ext)
    #         fig.savefig(fig_filename, facecolor=fig.get_facecolor(), edgecolor='none', dpi=300)    
    #         print('Saved figure: ' + fig_filename)



        
        
print("Complete! Exiting.")


